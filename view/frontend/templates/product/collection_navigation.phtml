<?php
/** @var \CravenDunnill\ProductNavCollectionThumbnail\Block\Product\View\CollectionNavigation $block */
$collectionName = $block->getCollectionName();
$collectionProducts = $block->getCollectionProducts();
$currentProduct = $block->getCurrentProduct();

// Prepare array for all products we'll display
$displayProducts = [];

// Only include current product if it's a simple product
if ($currentProduct && $currentProduct->getTypeId() === \Magento\Catalog\Model\Product\Type::TYPE_SIMPLE) {
	$displayProducts[] = $currentProduct;
}

// Add all other simple products from collection
foreach ($collectionProducts as $product) {
	$displayProducts[] = $product;
}

// Group products by color
$productsByColor = [];
$colorOptions = [];

foreach ($displayProducts as $product) {
	$colorId = $product->getTileColourName();
	$colorName = $block->getColorName($product);
	
	// Create a unique key for the color
	if (!isset($productsByColor[$colorId])) {
		$productsByColor[$colorId] = [
			'colorName' => $colorName,
			'colorId' => $colorId,
			'products' => []
		];
		
		// Track unique colors for the first row
		$colorOptions[$colorId] = [
			'id' => $colorId,
			'name' => $colorName,
			'isSelected' => false
		];
	}
	
	// Add product to the color group
	$productsByColor[$colorId]['products'][] = $product;
}

// Sort colors alphabetically
uasort($productsByColor, function($a, $b) {
	return strcmp($a['colorName'], $b['colorName']);
});

// Determine current color
$currentColorId = null;
if ($currentProduct) {
	$currentColorId = $currentProduct->getTileColourName();
	if (isset($colorOptions[$currentColorId])) {
		$colorOptions[$currentColorId]['isSelected'] = true;
	}
}

if ($collectionName && !empty($displayProducts)):
?>
<div id="product-collection-navigation" class="product-collection-navigation">
	<div class="collection-title">
		<h3><?= $block->escapeHtml($collectionName) ?> Collection</h3>
	</div>
	
	<!-- Colour options row -->
	<div class="collection-row-label">Select Colour: <?php 
		if ($currentColorId && isset($productsByColor[$currentColorId])) {
			echo $block->escapeHtml($productsByColor[$currentColorId]['colorName']);
		}
	?></div>
	<div class="collection-products-container">
		<div class="collection-nav-arrow prev" id="color-scroll-prev">
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
				<path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
			</svg>
		</div>
		
		<div class="collection-products color-options" id="color-slider">
			<?php foreach ($productsByColor as $colorId => $colorGroup): ?>
				<?php 
				$isCurrentColor = ($colorId == $currentColorId);
				$firstProduct = reset($colorGroup['products']);
				?>
				<div class="collection-product-item color-item <?= $isCurrentColor ? 'current-product' : '' ?>" 
					 data-color-id="<?= $block->escapeHtmlAttr($colorId) ?>">
					<a href="javascript:void(0);" class="color-selector" 
					   data-color-id="<?= $block->escapeHtmlAttr($colorId) ?>">
						<img src="<?= $block->escapeUrl($block->getProductImageUrl($firstProduct)) ?>" 
							 alt="<?= $block->escapeHtmlAttr($colorGroup['colorName']) ?>"
							 class="collection-product-image" />
						<span class="collection-product-color-name"><?= $block->escapeHtml($colorGroup['colorName']) ?></span>
					</a>
				</div>
			<?php endforeach; ?>
		</div>
		
		<div class="collection-nav-arrow next" id="color-scroll-next">
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
				<path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
			</svg>
		</div>
	</div>
	
	<!-- Size options table -->
	<div class="collection-row-label">Select Size: <?php 
		if ($currentProduct) {
			$currentSizeId = $currentProduct->getTileSize();
			if ($currentSizeId) {
				echo $block->escapeHtml($block->getAttributeOptionText('tile_size', $currentSizeId));
			}
		}
	?></div>
	<div class="collection-sizes-table-container">
		<table class="collection-sizes-table" id="sizes-table">
			<thead>
				<tr>
					<th>Size (mm)</th>
					<th>Price per tile</th>
					<th>Price per mÂ²</th>
				</tr>
			</thead>
			<tbody>
				<?php 
				// Start with the sizes for the current color
				$sizesToShow = [];
				if ($currentColorId && isset($productsByColor[$currentColorId])) {
					$sizesToShow = $productsByColor[$currentColorId]['products'];
				} elseif (!empty($productsByColor)) {
					// If no current color, show sizes for the first color
					$firstColor = reset($productsByColor);
					$sizesToShow = $firstColor['products'];
					$currentColorId = key($productsByColor);
				}
				
				// Sort by size
				usort($sizesToShow, function($a, $b) use ($block) {
					$sizeA = $a->getTileSize();
					$sizeB = $b->getTileSize();
					return strcmp($sizeA, $sizeB);
				});
				
				foreach ($sizesToShow as $product):
					$isCurrent = $product->getId() == $currentProduct->getId();
					$tileSize = $block->getAttributeOptionText('tile_size', $product->getTileSize());
					
					// Get price information
					$price = $product->getPriceInfo()->getPrice('final_price')->getValue();
					$pricePerM2 = $product->getData('price_m2');
				?>
					<tr class="size-row <?= $isCurrent ? 'current-product' : '' ?>" 
						data-color-id="<?= $block->escapeHtmlAttr($product->getTileColourName()) ?>"
						data-size-id="<?= $block->escapeHtmlAttr($product->getTileSize()) ?>"
						data-product-id="<?= $block->escapeHtmlAttr($product->getId()) ?>"
						data-product-url="<?= $block->escapeUrl($product->getProductUrl()) ?>">
						<td class="size-cell"><?= $block->escapeHtml($tileSize) ?></td>
						<td class="price-cell"><?= $block->escapeHtml($block->getFormattedPrice($price)) ?></td>
						<td class="price-m2-cell"><?= $block->escapeHtml($block->getFormattedPrice($pricePerM2)) ?></td>
					</tr>
				<?php endforeach; ?>
			</tbody>
		</table>
	</div>
	
	<!-- Hidden container for all product data -->
	<div id="collection-products-data" style="display: none;" 
		 data-current-color="<?= $block->escapeHtmlAttr($currentColorId) ?>">
		<?php foreach ($productsByColor as $colorId => $colorGroup): ?>
			<div class="color-data" data-color-id="<?= $block->escapeHtmlAttr($colorId) ?>">
				<?php foreach ($colorGroup['products'] as $product): ?>
					<?php 
					$tileSize = $block->getAttributeOptionText('tile_size', $product->getTileSize());
					$isCurrent = $product->getId() == $currentProduct->getId();
					$price = $product->getPriceInfo()->getPrice('final_price')->getValue();
					$pricePerM2 = $product->getData('price_m2');
					?>
					<div class="product-data" 
						 data-product-id="<?= $block->escapeHtmlAttr($product->getId()) ?>"
						 data-size-id="<?= $block->escapeHtmlAttr($product->getTileSize()) ?>"
						 data-size-name="<?= $block->escapeHtmlAttr($tileSize) ?>"
						 data-product-url="<?= $block->escapeUrl($product->getProductUrl()) ?>"
						 data-product-name="<?= $block->escapeHtmlAttr($product->getName()) ?>"
						 data-product-image="<?= $block->escapeUrl($block->getProductImageUrl($product)) ?>"
						 data-price="<?= $block->escapeHtmlAttr($price) ?>"
						 data-price-m2="<?= $block->escapeHtmlAttr($pricePerM2) ?>"
						 data-is-current="<?= $isCurrent ? 'true' : 'false' ?>">
					</div>
				<?php endforeach; ?>
			</div>
		<?php endforeach; ?>
	</div>
</div>

<script type="text/javascript">
document.addEventListener('DOMContentLoaded', function() {
	// Get the elements
	const colorSlider = document.getElementById('color-slider');
	const sizesTable = document.getElementById('sizes-table');
	const colorPrevBtn = document.getElementById('color-scroll-prev');
	const colorNextBtn = document.getElementById('color-scroll-next');
	const dataContainer = document.getElementById('collection-products-data');
	
	if (!colorSlider || !sizesTable || !dataContainer) return;
	
	// Variables for drag scrolling
	let isDown = false;
	let startX;
	let scrollLeft;
	
	// Scroll distance per click (in pixels)
	const scrollDistance = 200;
	
	// Initialize color selector functionality
	function initColorSelectors() {
		const colorSelectors = document.querySelectorAll('.color-selector');
		colorSelectors.forEach(selector => {
			selector.addEventListener('click', function(e) {
				e.preventDefault();
				
				const colorId = this.getAttribute('data-color-id');
				
				// Update current color
				dataContainer.setAttribute('data-current-color', colorId);
				
				// Update color selection
				document.querySelectorAll('.color-item').forEach(item => {
					item.classList.remove('current-product');
				});
				this.closest('.color-item').classList.add('current-product');
				
				// Update size options
				updateSizeOptions(colorId);
			});
		});
	}

	// Initialize size row selection functionality
	function initSizeRowSelectors() {
		const sizeRows = sizesTable.querySelectorAll('tbody tr.size-row');
		sizeRows.forEach(row => {
			row.addEventListener('click', function(e) {
				e.preventDefault();
				const productUrl = this.getAttribute('data-product-url');
				if (productUrl) {
					window.location.href = productUrl;
				}
			});
		});
	}
	
	// Update size options based on selected color
	function updateSizeOptions(colorId) {
		// Clear current size options
		const tableBody = sizesTable.querySelector('tbody');
		tableBody.innerHTML = '';
		
		// Get product data for the selected color
		const colorData = dataContainer.querySelector(`.color-data[data-color-id="${colorId}"]`);
		if (!colorData) return;
		
		// Get all products for this color
		const productElements = colorData.querySelectorAll('.product-data');
		
		// Create a map to store unique sizes
		const sizeMap = new Map();
		
		// Collect unique size options
		productElements.forEach(product => {
			const sizeId = product.getAttribute('data-size-id');
			
			if (!sizeMap.has(sizeId)) {
				sizeMap.set(sizeId, {
					id: sizeId,
					name: product.getAttribute('data-size-name'),
					url: product.getAttribute('data-product-url'),
					price: product.getAttribute('data-price'),
					priceM2: product.getAttribute('data-price-m2'),
					isCurrent: product.getAttribute('data-is-current') === 'true',
					productId: product.getAttribute('data-product-id')
				});
			}
		});
		
		// Sort sizes (assuming they are numerical or can be compared as strings)
		const sortedSizes = Array.from(sizeMap.values()).sort((a, b) => {
			return a.name.localeCompare(b.name, undefined, {numeric: true});
		});
		
		// Create size option rows
		sortedSizes.forEach(size => {
			const sizeRow = document.createElement('tr');
			sizeRow.className = `size-row ${size.isCurrent ? 'current-product' : ''}`;
			sizeRow.setAttribute('data-color-id', colorId);
			sizeRow.setAttribute('data-size-id', size.id);
			sizeRow.setAttribute('data-product-id', size.productId);
			sizeRow.setAttribute('data-product-url', size.url);
			
			// Format prices
			const formattedPrice = new Intl.NumberFormat('en-GB', { 
				style: 'currency', 
				currency: 'GBP' 
			}).format(size.price);
			
			const formattedPriceM2 = new Intl.NumberFormat('en-GB', { 
				style: 'currency', 
				currency: 'GBP' 
			}).format(size.priceM2);
			
			// Create row cells
			sizeRow.innerHTML = `
				<td class="size-cell">${size.name}</td>
				<td class="price-cell">${formattedPrice}</td>
				<td class="price-m2-cell">${formattedPriceM2}</td>
			`;
			
			tableBody.appendChild(sizeRow);
		});
		
		// Re-initialize row click handlers
		initSizeRowSelectors();
	}
	
	// Check if scrolling is needed and update button states
	function updateButtonStates() {
		updateSliderButtonStates(colorSlider, colorPrevBtn, colorNextBtn);
	}
	
	function updateSliderButtonStates(slider, prevBtn, nextBtn) {
		const isScrollable = slider.scrollWidth > slider.clientWidth;
		
		// Always show both buttons
		prevBtn.style.display = 'flex';
		nextBtn.style.display = 'flex';
		
		// Update disabled state
		if (slider.scrollLeft <= 0) {
			prevBtn.classList.add('disabled');
		} else {
			prevBtn.classList.remove('disabled');
		}
		
		if (slider.scrollLeft + slider.clientWidth >= slider.scrollWidth - 5) {
			nextBtn.classList.add('disabled');
		} else {
			nextBtn.classList.remove('disabled');
		}
	}
	
	// Center current product on load
	function centerCurrentColor() {
		const currentProduct = colorSlider.querySelector('.color-item.current-product');
		centerElement(colorSlider, currentProduct);
	}
	
	function centerElement(slider, element) {
		if (element) {
			const containerWidth = slider.offsetWidth;
			const elementOffset = element.offsetLeft;
			
			// Center the element in the viewport
			slider.scrollLeft = elementOffset - (containerWidth / 2) + (element.offsetWidth / 2);
		}
	}
	
	// Set up event listeners for color slider
	setupSlider(colorSlider, colorPrevBtn, colorNextBtn);
	
	function setupSlider(slider, prevBtn, nextBtn) {
		// Scroll left button click
		prevBtn.addEventListener('click', function(e) {
			e.preventDefault();
			slider.scrollBy({
				left: -scrollDistance,
				behavior: 'smooth'
			});
			setTimeout(() => updateButtonStates(), 100); // Update after scroll animation
		});
		
		// Scroll right button click
		nextBtn.addEventListener('click', function(e) {
			e.preventDefault();
			slider.scrollBy({
				left: scrollDistance,
				behavior: 'smooth'
			});
			setTimeout(() => updateButtonStates(), 100); // Update after scroll animation
		});
		
		// Mouse drag to scroll
		slider.addEventListener('mousedown', function(e) {
			isDown = true;
			slider.classList.add('active');
			startX = e.pageX - slider.offsetLeft;
			scrollLeft = slider.scrollLeft;
			// Prevent text selection during drag
			e.preventDefault();
		});
		
		slider.addEventListener('mouseleave', function() {
			isDown = false;
			slider.classList.remove('active');
		});
		
		slider.addEventListener('mouseup', function() {
			isDown = false;
			slider.classList.remove('active');
			updateButtonStates();
		});
		
		slider.addEventListener('mousemove', function(e) {
			if (!isDown) return;
			e.preventDefault();
			const x = e.pageX - slider.offsetLeft;
			const walk = (x - startX) * 2; // Scroll speed multiplier
			slider.scrollLeft = scrollLeft - walk;
			updateButtonStates();
		});
		
		// Touch events for mobile
		slider.addEventListener('touchstart', function(e) {
			isDown = true;
			slider.classList.add('active');
			startX = e.touches[0].pageX - slider.offsetLeft;
			scrollLeft = slider.scrollLeft;
		});
		
		slider.addEventListener('touchend', function() {
			isDown = false;
			slider.classList.remove('active');
			updateButtonStates();
		});
		
		slider.addEventListener('touchmove', function(e) {
			if (!isDown) return;
			const x = e.touches[0].pageX - slider.offsetLeft;
			const walk = (x - startX) * 2;
			slider.scrollLeft = scrollLeft - walk;
			updateButtonStates();
		});
		
		// Listen for scroll events
		slider.addEventListener('scroll', function() {
			updateButtonStates();
		});
	}
	
	// Listen for window resize
	window.addEventListener('resize', function() {
		updateButtonStates();
	});
	
	// Initialize
	initColorSelectors();
	initSizeRowSelectors();
	updateButtonStates();
	centerCurrentColor();
});
</script>
<?php endif; ?>