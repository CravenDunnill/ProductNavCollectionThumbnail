<?php
/** @var \CravenDunnill\ProductNavCollectionThumbnail\Block\Product\View\CollectionNavigation $block */
$collectionName = $block->getCollectionName();
$collectionProducts = $block->getCollectionProducts();
$currentProduct = $block->getCurrentProduct();

// Prepare array for all products we'll display
$displayProducts = [];

// Only include current product if it's a simple product
if ($currentProduct && $currentProduct->getTypeId() === \Magento\Catalog\Model\Product\Type::TYPE_SIMPLE) {
	$displayProducts[] = $currentProduct;
}

// Add all other simple products from collection
foreach ($collectionProducts as $product) {
	$displayProducts[] = $product;
}

// Group products by color
$productsByColor = [];
$colorOptions = [];

foreach ($displayProducts as $product) {
	$colorId = $product->getTileColourName();
	$colorName = $block->getColorName($product);
	
	// Create a unique key for the color
	if (!isset($productsByColor[$colorId])) {
		$productsByColor[$colorId] = [
			'colorName' => $colorName,
			'colorId' => $colorId,
			'products' => []
		];
		
		// Track unique colors for the first row
		$colorOptions[$colorId] = [
			'id' => $colorId,
			'name' => $colorName,
			'isSelected' => false
		];
	}
	
	// Add product to the color group
	$productsByColor[$colorId]['products'][] = $product;
}

// Sort colors alphabetically
uasort($productsByColor, function($a, $b) {
	return strcmp($a['colorName'], $b['colorName']);
});

// Determine current color
$currentColorId = null;
if ($currentProduct) {
	$currentColorId = $currentProduct->getTileColourName();
	if (isset($colorOptions[$currentColorId])) {
		$colorOptions[$currentColorId]['isSelected'] = true;
	}
}

if ($collectionName && !empty($displayProducts)):
?>
<div id="product-collection-navigation" class="product-collection-navigation">
	<div class="collection-title">
		<h3><?= $block->escapeHtml($collectionName) ?> Collection</h3>
	</div>
	
	<!-- Colour options row - moved the label below the carousel -->
	<div class="collection-products-container">
		<div class="collection-nav-arrow prev" id="color-scroll-prev">
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
				<path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
			</svg>
		</div>
		
		<div class="collection-products color-options" id="color-slider">
			<?php foreach ($productsByColor as $colorId => $colorGroup): ?>
				<?php 
				$isCurrentColor = ($colorId == $currentColorId);
				$firstProduct = reset($colorGroup['products']);
				
				// Count unique sizes for this color
				$uniqueSizes = [];
				$sizeProducts = [];
				foreach ($colorGroup['products'] as $product) {
					$sizeId = $product->getTileSize();
					if (!isset($uniqueSizes[$sizeId])) {
						$uniqueSizes[$sizeId] = true;
						$sizeProducts[$sizeId] = $product;
					}
				}
				$sizeCount = count($uniqueSizes);
				
				// Get the smallest size product
				$smallestSizeProduct = $firstProduct;
				if (count($sizeProducts) > 0) {
					// Sort products by size ID (assuming smaller ID = smaller size)
					// You may need to adjust this logic based on how sizes are stored
					ksort($sizeProducts);
					$smallestSizeProduct = reset($sizeProducts);
				}
				$productUrl = $smallestSizeProduct->getProductUrl();
				?>
				<div class="collection-product-item color-item <?= $isCurrentColor ? 'current-product' : '' ?>" 
					 data-color-id="<?= $block->escapeHtmlAttr($colorId) ?>">
					<a href="<?= $block->escapeUrl($productUrl) ?>" class="color-selector" 
					   data-color-id="<?= $block->escapeHtmlAttr($colorId) ?>">
						<div class="thumbnail-wrapper">
							<img src="<?= $block->escapeUrl($block->getProductImageUrl($firstProduct)) ?>" 
								 alt="<?= $block->escapeHtmlAttr($colorGroup['colorName']) ?>"
								 class="collection-product-image" 
								 title="<?= $block->escapeHtmlAttr($colorGroup['colorName']) ?>" />
							<?php if ($sizeCount > 1): ?>
								<span class="size-count-badge"><?= $sizeCount ?> sizes</span>
							<?php endif; ?>
						</div>
					</a>
				</div>
			<?php endforeach; ?>
		</div>
		
		<div class="collection-nav-arrow next" id="color-scroll-next">
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
				<path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
			</svg>
		</div>
	</div>
	
	<!-- Moved the color label to here, after the carousel -->
	<div class="collection-row-label">Select Colour: <?php 
		if ($currentColorId && isset($productsByColor[$currentColorId])) {
			echo $block->escapeHtml($productsByColor[$currentColorId]['colorName']);
		}
	?></div>
	
	<!-- Select Size Button - updated to show count with bold sizes -->
	<div class="collection-size-selector">
		<button type="button" id="toggle-size-table-btn" class="action primary">
			<span>
				<?php
				// Count unique sizes for current color
				$uniqueSizes = [];
				if ($currentColorId && isset($productsByColor[$currentColorId])) {
					foreach ($productsByColor[$currentColorId]['products'] as $product) {
						$sizeId = $product->getTileSize();
						if (!isset($uniqueSizes[$sizeId])) {
							$uniqueSizes[$sizeId] = true;
						}
					}
				}
				$sizeCount = count($uniqueSizes);
				echo 'Choose from <span class="size-count">' . $sizeCount . ' size' . ($sizeCount == 1 ? '' : 's') . '</span>';
				?>
			</span>
		</button>
		<?php if ($currentProduct): ?>
			<?php 
			$currentSizeId = $currentProduct->getTileSize();
			if ($currentSizeId): 
			?>
			<span class="current-size-display">
				Current Size: <?= $block->escapeHtml($block->getAttributeOptionText('tile_size', $currentSizeId)) ?>
			</span>
			<?php endif; ?>
		<?php endif; ?>
	</div>
	
	<!-- Size table container - initially hidden but with explicit height to ensure it can be displayed -->
	<div id="size-table-container" style="display: none; margin-top: 20px;">
		<h3>Available Sizes</h3>
		<div class="collection-sizes-table-container" style="overflow: visible;">
			<table class="collection-sizes-table" id="sizes-table" style="width: 100%;">
				<thead>
					<tr>
						<th>Size (mm)</th>
						<th>Price per tile</th>
						<th>Price per mÂ²</th>
					</tr>
				</thead>
				<tbody>
					<?php 
					// Start with the sizes for the current color
					$sizesToShow = [];
					if ($currentColorId && isset($productsByColor[$currentColorId])) {
						$sizesToShow = $productsByColor[$currentColorId]['products'];
					} elseif (!empty($productsByColor)) {
						// If no current color, show sizes for the first color
						$firstColor = reset($productsByColor);
						$sizesToShow = $firstColor['products'];
						$currentColorId = key($productsByColor);
					}
					
					// Sort by size
					usort($sizesToShow, function($a, $b) use ($block) {
						$sizeA = $a->getTileSize();
						$sizeB = $b->getTileSize();
						return strcmp($sizeA, $sizeB);
					});
					
					foreach ($sizesToShow as $product):
						$isCurrent = $product->getId() == $currentProduct->getId();
						$tileSize = $block->getAttributeOptionText('tile_size', $product->getTileSize());
						
						// Get price information
						$price = $product->getPriceInfo()->getPrice('final_price')->getValue();
						$pricePerM2 = $product->getData('price_m2');
						$productUrl = $product->getProductUrl();
					?>
						<tr class="size-row <?= $isCurrent ? 'current-product' : '' ?>">
							<td class="size-cell">
								<a href="<?= $block->escapeUrl($productUrl) ?>" class="size-link">
									<?= $block->escapeHtml($tileSize) ?>
								</a>
							</td>
							<td class="price-cell">
								<a href="<?= $block->escapeUrl($productUrl) ?>" class="size-link">
									<?= $block->escapeHtml($block->getFormattedPrice($price)) ?>
								</a>
							</td>
							<td class="price-m2-cell">
								<a href="<?= $block->escapeUrl($productUrl) ?>" class="size-link">
									<?= $block->escapeHtml($block->getFormattedPrice($pricePerM2)) ?>
								</a>
							</td>
						</tr>
					<?php endforeach; ?>
				</tbody>
			</table>
		</div>
	</div>
</div><!-- End of product-collection-navigation div -->

<div id="collection-products-data" style="display: none;" 
	 data-current-color="<?= $block->escapeHtmlAttr($currentColorId) ?>">
	<?php foreach ($productsByColor as $colorId => $colorGroup): ?>
		<div class="color-data" data-color-id="<?= $block->escapeHtmlAttr($colorId) ?>">
			<?php foreach ($colorGroup['products'] as $product): ?>
				<?php 
				$tileSize = $block->getAttributeOptionText('tile_size', $product->getTileSize());
				$isCurrent = $product->getId() == $currentProduct->getId();
				$price = $product->getPriceInfo()->getPrice('final_price')->getValue();
				$pricePerM2 = $product->getData('price_m2');
				?>
				<div class="product-data" 
					 data-product-id="<?= $block->escapeHtmlAttr($product->getId()) ?>"
					 data-size-id="<?= $block->escapeHtmlAttr($product->getTileSize()) ?>"
					 data-size-name="<?= $block->escapeHtmlAttr($tileSize) ?>"
					 data-product-url="<?= $block->escapeUrl($product->getProductUrl()) ?>"
					 data-product-name="<?= $block->escapeHtmlAttr($product->getName()) ?>"
					 data-product-image="<?= $block->escapeUrl($block->getProductImageUrl($product)) ?>"
					 data-price="<?= $block->escapeHtmlAttr($price) ?>"
					 data-price-m2="<?= $block->escapeHtmlAttr($pricePerM2) ?>"
					 data-is-current="<?= $isCurrent ? 'true' : 'false' ?>">
				</div>
			<?php endforeach; ?>
		</div>
	<?php endforeach; ?>
</div>

<script type="text/javascript">
document.addEventListener('DOMContentLoaded', function() {
	// Get the elements
	const colorSlider = document.getElementById('color-slider');
	const colorPrevBtn = document.getElementById('color-scroll-prev');
	const colorNextBtn = document.getElementById('color-scroll-next');
	const dataContainer = document.getElementById('collection-products-data');
	const toggleSizeBtn = document.getElementById('toggle-size-table-btn');
	const sizeTableContainer = document.getElementById('size-table-container');
	const sizesTable = document.getElementById('sizes-table');
	
	console.log('Toggle size button found:', !!toggleSizeBtn);
	console.log('Size table container found:', !!sizeTableContainer);
	
	// Update button text when color changes - UPDATED for bold size text
	function updateSizeButtonText() {
		// Get the current color ID
		const currentColorId = dataContainer.getAttribute('data-current-color');
		
		// Count sizes for the current color
		const colorData = dataContainer.querySelector(`.color-data[data-color-id="${currentColorId}"]`);
		if (colorData) {
			const products = colorData.querySelectorAll('.product-data');
			const uniqueSizes = new Set();
			
			products.forEach(product => {
				uniqueSizes.add(product.getAttribute('data-size-id'));
			});
			
			const sizeCount = uniqueSizes.size;
			
			// Use HTML with span to make size count bold
			if (toggleSizeBtn && !toggleSizeBtn.classList.contains('active')) {
				toggleSizeBtn.querySelector('span').innerHTML = `Choose from <span class="size-count">${sizeCount} size${sizeCount === 1 ? '' : 's'}</span>`;
			}
		}
	}
	
	// Toggle size table visibility
	if (toggleSizeBtn && sizeTableContainer) {
		// First check if the table is already visible (might be from browser cache)
		console.log('Initial size table display state:', sizeTableContainer.style.display);
		
		// Function to show the table
		function showSizeTable() {
			console.log('Showing size table');
			// Use multiple methods to ensure it's shown
			sizeTableContainer.style.display = 'block';
			sizeTableContainer.style.visibility = 'visible';
			sizeTableContainer.style.opacity = '1';
			sizeTableContainer.style.height = 'auto';
			sizeTableContainer.style.overflow = 'visible';
			
			// Update button - make sure this is just text, not HTML
			toggleSizeBtn.querySelector('span').textContent = 'Hide Sizes';
			toggleSizeBtn.classList.add('active');
			
			console.log('Size table display after showing:', sizeTableContainer.style.display);
			console.log('Size table offsetHeight:', sizeTableContainer.offsetHeight);
		}
		
		// Function to hide the table
		function hideSizeTable() {
			console.log('Hiding size table');
			sizeTableContainer.style.display = 'none';
			
			// Update button text to show number of options
			updateSizeButtonText();
			
			toggleSizeBtn.classList.remove('active');
		}
		
		// Direct click handler
		toggleSizeBtn.onclick = function(e) {
			e.preventDefault();
			console.log('Toggle button clicked with onclick handler');
			
			let isHidden = sizeTableContainer.style.display === 'none' || 
							sizeTableContainer.style.display === '' || 
							window.getComputedStyle(sizeTableContainer).display === 'none';
							
			console.log('Is size table hidden?', isHidden, 
						'style.display=', sizeTableContainer.style.display,
						'computed display=', window.getComputedStyle(sizeTableContainer).display);
			
			if (isHidden) {
				showSizeTable();
			} else {
				hideSizeTable();
			}
			
			// Force layout recalculation
			void sizeTableContainer.offsetHeight;
		};
	}
	
	// Initialize color selector functionality
	function initColorSelectors() {
		const colorSelectors = document.querySelectorAll('.color-selector');
		colorSelectors.forEach(selector => {
			// We keep this just to update the UI when a color is clicked but not navigated to
			// (e.g., if user clicks but holds Ctrl to open in new tab)
			selector.addEventListener('click', function(e) {
				// Don't use preventDefault() as we want the link to navigate normally
				
				const colorId = this.getAttribute('data-color-id');
				
				// Update current color
				dataContainer.setAttribute('data-current-color', colorId);
				
				// Update color selection
				document.querySelectorAll('.color-item').forEach(item => {
					item.classList.remove('current-product');
				});
				this.closest('.color-item').classList.add('current-product');
				
				// Update size table and button text in case the link is opened in a new tab
				// and the current page remains
				updateSizeTable(colorId);
				updateSizeButtonText();
			});
		});
	}
	
	// Update size table for selected color
	function updateSizeTable(colorId) {
		console.log('Updating size table for color:', colorId);
		
		// Get color data
		const colorData = dataContainer.querySelector(`.color-data[data-color-id="${colorId}"]`);
		if (!colorData) {
			console.error('Color data not found for ID:', colorId);
			return;
		}
		
		// Get product data
		const productElements = colorData.querySelectorAll('.product-data');
		console.log('Found', productElements.length, 'products for color', colorId);
		
		// Clear existing rows
		const tableBody = sizesTable.querySelector('tbody');
		tableBody.innerHTML = '';
		
		// Map to store unique sizes
		const sizeMap = new Map();
		
		// Collect unique sizes
		productElements.forEach(product => {
			const sizeId = product.getAttribute('data-size-id');
			
			if (!sizeMap.has(sizeId)) {
				sizeMap.set(sizeId, {
					id: sizeId,
					name: product.getAttribute('data-size-name'),
					url: product.getAttribute('data-product-url'),
					price: product.getAttribute('data-price'),
					priceM2: product.getAttribute('data-price-m2'),
					isCurrent: product.getAttribute('data-is-current') === 'true',
					productId: product.getAttribute('data-product-id')
				});
			}
		});
		
		// Convert to array and sort
		const sizes = Array.from(sizeMap.values());
		sizes.sort((a, b) => {
			return a.name.localeCompare(b.name, undefined, {numeric: true});
		});
		
		// Create rows
		sizes.forEach(size => {
			const row = document.createElement('tr');
			row.className = `size-row ${size.isCurrent ? 'current-product' : ''}`;
			
			// Format prices
			const formattedPrice = new Intl.NumberFormat('en-GB', { 
				style: 'currency', 
				currency: 'GBP' 
			}).format(parseFloat(size.price));
			
			const formattedPriceM2 = new Intl.NumberFormat('en-GB', { 
				style: 'currency', 
				currency: 'GBP' 
			}).format(parseFloat(size.priceM2));
			
			// Create cells with proper links
			row.innerHTML = `
				<td class="size-cell">
					<a href="${size.url}" class="size-link">${size.name}</a>
				</td>
				<td class="price-cell">
					<a href="${size.url}" class="size-link">${formattedPrice}</a>
				</td>
				<td class="price-m2-cell">
					<a href="${size.url}" class="size-link">${formattedPriceM2}</a>
				</td>
			`;
			
			// Add to table
			tableBody.appendChild(row);
		});
		
		// If size table is currently visible, keep it visible
		if (sizeTableContainer.style.display === 'block') {
			sizeTableContainer.style.display = 'block';
		}
	}
	
	// Check if scrolling is needed and update button states
	function updateButtonStates() {
		updateSliderButtonStates(colorSlider, colorPrevBtn, colorNextBtn);
	}
	
	function updateSliderButtonStates(slider, prevBtn, nextBtn) {
		const isScrollable = slider.scrollWidth > slider.clientWidth;
		
		// Always show both buttons
		prevBtn.style.display = 'flex';
		nextBtn.style.display = 'flex';
		
		// Update disabled state
		if (slider.scrollLeft <= 0) {
			prevBtn.classList.add('disabled');
		} else {
			prevBtn.classList.remove('disabled');
		}
		
		if (slider.scrollLeft + slider.clientWidth >= slider.scrollWidth - 5) {
			nextBtn.classList.add('disabled');
		} else {
			nextBtn.classList.remove('disabled');
		}
	}
	
	// Center current product on load
	function centerCurrentColor() {
		const currentProduct = colorSlider.querySelector('.color-item.current-product');
		centerElement(colorSlider, currentProduct);
	}
	
	function centerElement(slider, element) {
		if (element) {
			const containerWidth = slider.offsetWidth;
			const elementOffset = element.offsetLeft;
			
			// Center the element in the viewport
			slider.scrollLeft = elementOffset - (containerWidth / 2) + (element.offsetWidth / 2);
		}
	}
	
	// Set up event listeners for color slider
	setupSlider(colorSlider, colorPrevBtn, colorNextBtn);
	
	function setupSlider(slider, prevBtn, nextBtn) {
		// Scroll left button click
		prevBtn.addEventListener('click', function(e) {
			e.preventDefault();
			slider.scrollBy({
				left: -200, // Scroll distance
				behavior: 'smooth'
			});
			setTimeout(() => updateButtonStates(), 100); // Update after scroll animation
		});
		
		// Scroll right button click
		nextBtn.addEventListener('click', function(e) {
			e.preventDefault();
			slider.scrollBy({
				left: 200, // Scroll distance
				behavior: 'smooth'
			});
			setTimeout(() => updateButtonStates(), 100); // Update after scroll animation
		});
		
		// Mouse drag to scroll
		let isDown = false;
		let startX;
		let scrollLeft;
		
		slider.addEventListener('mousedown', function(e) {
			isDown = true;
			slider.classList.add('active');
			startX = e.pageX - slider.offsetLeft;
			scrollLeft = slider.scrollLeft;
			e.preventDefault();
		});
		
		slider.addEventListener('mouseleave', function() {
			isDown = false;
			slider.classList.remove('active');
		});
		
		slider.addEventListener('mouseup', function() {
			isDown = false;
			slider.classList.remove('active');
			updateButtonStates();
		});
		
		slider.addEventListener('mousemove', function(e) {
			if (!isDown) return;
			e.preventDefault();
			const x = e.pageX - slider.offsetLeft;
			const walk = (x - startX) * 2; // Scroll speed multiplier
			slider.scrollLeft = scrollLeft - walk;
			updateButtonStates();
		});
		
		// Listen for scroll events
		slider.addEventListener('scroll', function() {
			updateButtonStates();
		});
	}
	
	// We don't need the click handlers anymore since we're using links
	// Initialize functionality
	initColorSelectors();
	updateButtonStates();
	centerCurrentColor();
	
	// Initialize button text with size count
	updateSizeButtonText();
	
	// Add simple styles for the button and links
	const style = document.createElement('style');
	style.textContent = `
		#toggle-size-table-btn {
			background-color: #ffffff !important;
			border: 1px solid #002C5A !important;
			color: #333333 !important;
			border-radius: 0 !important;
			text-align: left !important;
			padding: 0 !important;
			display: flex !important;
			justify-content: space-between !important;
			align-items: center !important;
			overflow: hidden !important;
		}
		
		#toggle-size-table-btn span {
			padding: 10px 15px !important;
			text-align: left !important;
			display: inline-block !important;
			width: calc(100% - 50px) !important;
			box-sizing: border-box !important;
			font-weight: normal !important;
		}
		
		#toggle-size-table-btn span .size-count {
			font-weight: bold !important;
		}
		
		#toggle-size-table-btn:after {
			content: ">" !important;
			position: absolute !important;
			right: 0 !important;
			top: 0 !important;
			width: 50px !important;
			height: 100% !important;
			display: flex !important;
			align-items: center !important;
			justify-content: center !important;
			background-color: #F4F9FF !important;
			color: #002C5A !important;
			font-weight: bold !important;
			font-size: 18px !important;
			transition: all 0.2s ease !important;
		}
		
		#toggle-size-table-btn:hover:after,
		#toggle-size-table-btn:focus:after {
			background-color: #002C5A !important;
			color: #ffffff !important;
		}
		
		#toggle-size-table-btn.active {
			background-color: #ffffff !important;
			border-color: #002C5A !important;
			color: #333333 !important;
		}
		
		#size-table-container[style*="display: block"] {
			display: block !important;
			visibility: visible !important;
			opacity: 1 !important;
			height: auto !important;
			overflow: visible !important;
		}
		
		.thumbnail-wrapper {
			position: relative;
			display: inline-block;
		}
		
		.size-count-badge {
			position: absolute;
			bottom: 0;
			left: 0;
			right: 0;
			background-color: rgba(255, 85, 1, 0.9);
			color: white;
			padding: 1px 5px;
			font-size: 11px;
			font-weight: 600;
			text-align: center;
			border-bottom-left-radius: 3px;
			border-bottom-right-radius: 3px;
		}
		
		.collection-products-container {
			margin-top: 10px;
			margin-bottom: 5px;
		}
		
		.collection-row-label {
			margin: 8px 0 15px;
			text-align: left;
		}
		
		.collection-sizes-table .size-link {
			display: block;
			color: inherit;
			text-decoration: none;
			padding: 4px 0;
			width: 100%;
		}
		
		.collection-sizes-table tr.size-row {
			transition: background-color 0.2s;
			height: auto !important;
			visibility: visible !important;
		}
		
		.collection-sizes-table tr.size-row:hover {
			background-color: #f8f8f8 !important;
		}
		
		.collection-sizes-table {
			border-collapse: separate !important;
			border-spacing: 0 !important;
			width: 100% !important;
		}
		
		.collection-sizes-table td, 
		.collection-sizes-table th {
			visibility: visible !important;
			display: table-cell !important;
		}
	`;
	document.head.appendChild(style);
});
</script>
<?php endif; ?>