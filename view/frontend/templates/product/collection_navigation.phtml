<?php
/** @var \CravenDunnill\ProductNavCollectionThumbnail\Block\Product\View\CollectionNavigation $block */
$collectionName = $block->getCollectionName();
$collectionProducts = $block->getCollectionProducts();
$currentProduct = $block->getCurrentProduct();

// Prepare array for all products we'll display
$displayProducts = [];

// Only include current product if it's a simple product
if ($currentProduct && $currentProduct->getTypeId() === \Magento\Catalog\Model\Product\Type::TYPE_SIMPLE) {
	$displayProducts[] = $currentProduct;
}

// Add all other simple products from collection
foreach ($collectionProducts as $product) {
	$displayProducts[] = $product;
}

// Custom sort function to organize products by tile_colour_name alphabetically
usort($displayProducts, function($a, $b) use ($block) {
	$colorA = $block->getColorName($a);
	$colorB = $block->getColorName($b);
	return strcmp($colorA, $colorB);
});

if ($collectionName && !empty($displayProducts)):
?>
<div id="product-collection-navigation" class="product-collection-navigation">
	<div class="collection-title">
		<h3><?= $block->escapeHtml($collectionName) ?> Collection</h3>
	</div>
	
	<div class="collection-products-container">
		<div class="collection-nav-arrow prev" id="scroll-prev">
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
				<path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
			</svg>
		</div>
		
		<div class="collection-products" id="collection-slider">
			<?php foreach ($displayProducts as $product): ?>
				<?php 
				$isCurrent = $product->getId() == $currentProduct->getId();
				$colorName = $block->getColorName($product);
				?>
				<div class="collection-product-item <?= $isCurrent ? 'current-product' : '' ?>">
					<?php 
					// Get tile size attribute text
					$tileSize = '';
					if ($product->getTileSize()) {
						$tileSize = $block->getAttributeOptionText('tile_size', $product->getTileSize());
					}
					?>
					<?php if ($isCurrent): ?>
						<div class="product-item-wrapper">
							<img src="<?= $block->escapeUrl($block->getProductImageUrl($product)) ?>" 
								 alt="<?= $block->escapeHtmlAttr($product->getName()) ?>"
								 class="collection-product-image" />
							<span class="collection-product-color-name"><?= $block->escapeHtml($colorName) ?></span>
							<?php if ($tileSize): ?>
							<span class="collection-product-size"><?= $block->escapeHtml($tileSize) ?></span>
							<?php endif; ?>
						</div>
					<?php else: ?>
						<a href="<?= $block->escapeUrl($product->getProductUrl()) ?>" title="<?= $block->escapeHtmlAttr($product->getName()) ?>">
							<img src="<?= $block->escapeUrl($block->getProductImageUrl($product)) ?>" 
								 alt="<?= $block->escapeHtmlAttr($product->getName()) ?>"
								 class="collection-product-image" />
							<span class="collection-product-color-name"><?= $block->escapeHtml($colorName) ?></span>
							<?php if ($tileSize): ?>
							<span class="collection-product-size"><?= $block->escapeHtml($tileSize) ?></span>
							<?php endif; ?>
						</a>
					<?php endif; ?>
				</div>
			<?php endforeach; ?>
		</div>
		
		<div class="collection-nav-arrow next" id="scroll-next">
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
				<path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
			</svg>
		</div>
	</div>
</div>

<script type="text/javascript">
document.addEventListener('DOMContentLoaded', function() {
	// Get the elements
	const slider = document.getElementById('collection-slider');
	const prevBtn = document.getElementById('scroll-prev');
	const nextBtn = document.getElementById('scroll-next');
	
	if (!slider || !prevBtn || !nextBtn) return;
	
	// Variables for drag scrolling
	let isDown = false;
	let startX;
	let scrollLeft;
	
	// Scroll distance per click (in pixels)
	const scrollDistance = 200;
	
	// Check if scrolling is needed and update button states
	function updateButtonStates() {
		const isScrollable = slider.scrollWidth > slider.clientWidth;
		
		// Always show both buttons
		prevBtn.style.display = 'flex';
		nextBtn.style.display = 'flex';
		
		// Update disabled state instead of hiding
		if (slider.scrollLeft <= 0) {
			prevBtn.classList.add('disabled');
		} else {
			prevBtn.classList.remove('disabled');
		}
		
		if (slider.scrollLeft + slider.clientWidth >= slider.scrollWidth - 5) {
			nextBtn.classList.add('disabled');
		} else {
			nextBtn.classList.remove('disabled');
		}
	}
	
	// Scroll left button click
	prevBtn.addEventListener('click', function(e) {
		e.preventDefault();
		slider.scrollBy({
			left: -scrollDistance,
			behavior: 'smooth'
		});
		setTimeout(updateButtonStates, 100); // Update after scroll animation
	});
	
	// Scroll right button click
	nextBtn.addEventListener('click', function(e) {
		e.preventDefault();
		slider.scrollBy({
			left: scrollDistance,
			behavior: 'smooth'
		});
		setTimeout(updateButtonStates, 100); // Update after scroll animation
	});
	
	// Mouse drag to scroll
	slider.addEventListener('mousedown', function(e) {
		isDown = true;
		slider.classList.add('active');
		startX = e.pageX - slider.offsetLeft;
		scrollLeft = slider.scrollLeft;
		// Prevent text selection during drag
		e.preventDefault();
	});
	
	slider.addEventListener('mouseleave', function() {
		isDown = false;
		slider.classList.remove('active');
	});
	
	slider.addEventListener('mouseup', function() {
		isDown = false;
		slider.classList.remove('active');
		updateButtonStates();
	});
	
	slider.addEventListener('mousemove', function(e) {
		if (!isDown) return;
		e.preventDefault();
		const x = e.pageX - slider.offsetLeft;
		const walk = (x - startX) * 2; // Scroll speed multiplier
		slider.scrollLeft = scrollLeft - walk;
		updateButtonStates();
	});
	
	// Touch events for mobile
	slider.addEventListener('touchstart', function(e) {
		isDown = true;
		slider.classList.add('active');
		startX = e.touches[0].pageX - slider.offsetLeft;
		scrollLeft = slider.scrollLeft;
	});
	
	slider.addEventListener('touchend', function() {
		isDown = false;
		slider.classList.remove('active');
		updateButtonStates();
	});
	
	slider.addEventListener('touchmove', function(e) {
		if (!isDown) return;
		const x = e.touches[0].pageX - slider.offsetLeft;
		const walk = (x - startX) * 2;
		slider.scrollLeft = scrollLeft - walk;
		updateButtonStates();
	});
	
	// Listen for scroll events
	slider.addEventListener('scroll', function() {
		updateButtonStates();
	});
	
	// Listen for window resize
	window.addEventListener('resize', function() {
		updateButtonStates();
	});
	
	// Center current product on load
	function centerCurrentProduct() {
		const currentProduct = document.querySelector('.collection-product-item.current-product');
		if (currentProduct) {
			const containerWidth = slider.offsetWidth;
			const currentProductOffset = currentProduct.offsetLeft;
			
			// Center the current product in the viewport
			slider.scrollLeft = currentProductOffset - (containerWidth / 2) + (currentProduct.offsetWidth / 2);
			
			// Update button states after scrolling
			updateButtonStates();
		}
	}
	
	// Initialize after a short delay to ensure elements are properly sized
	setTimeout(function() {
		updateButtonStates();
		centerCurrentProduct();
	}, 300);
});
</script>
<?php endif; ?>